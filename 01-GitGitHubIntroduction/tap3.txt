30 git commands:


1. git init: Initializes a new Git repository in the current directory.

2. git clone [repository_url]: Clones an existing repository from a URL to create a local copy.

3. git add [file]: Adds a file or directory to the staging area for the next commit.

4. git commit -m "[commit_message]": Commits the staged changes with a descriptive message.

5. git status: Shows the current status of the repository, including tracked/untracked files and changes.

6. git diff: Shows the changes between the working directory and the staging area.

7. git diff --staged: Shows the changes between the staging area and the last commit.

8. git log: Displays a history of commits in reverse chronological order.

9. git branch: Lists all branches in the repository.

10. git branch [branch_name]: Creates a new branch with the specified name.

11. git checkout [branch_name]: Switches to the specified branch.

12. git checkout -b [branch_name]: Creates a new branch and switches to it.

13. git merge [branch_name]: Merges the specified branch into the current branch.

14. git remote: Lists all remote repositories associated with the local repository.

15. git remote add [remote_name] [remote_url]: Adds a new remote repository.

16. git push [remote_name] [branch_name]: Pushes the committed changes to a remote repository.

17.git pull [remote_name] [branch_name]: Fetches changes from a remote repository and merges them into the current branch.

18. git fetch [remote_name]: Fetches changes from a remote repository without merging.

19. git reset HEAD [file]: Unstages a file from the staging area.

20. git reset --soft [commit]: Resets the current branch's HEAD to a previous commit, keeping staged changes.

21. git reset --mixed [commit]: Resets the current branch's HEAD to a previous commit, unstaging changes.

22. git reset --hard [commit]: Resets the current branch's HEAD to a previous commit, discarding all changes.

23. git stash: Stashes changes in the working directory to a stack, allowing you to work on something else temporarily.

24. git stash apply: Applies the most recent stash to the working directory without removing it from the stack.

25. git stash list: Lists all stashes that are currently saved.

26. git tag [tag_name]: Creates a lightweight tag at the current commit.

27. git tag -a [tag_name] -m "[tag_message]": Creates an annotated tag with a message.

28. git show [tag_name]: Shows the details of a specific tag.

29. git rm [file]: Removes a file from the working directory and stages the removal for commit.

30 .git mv [source] [destination]: Moves or renames a file and stages the change for commit.